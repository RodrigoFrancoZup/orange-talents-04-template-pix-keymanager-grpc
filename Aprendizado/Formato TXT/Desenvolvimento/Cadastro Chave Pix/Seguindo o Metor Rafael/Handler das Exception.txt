Ao fazer validações quando a mesma falha uma Exception é lançada, como vamos fazer a mensagem chegar ao usuário? Também criamos algumas exceptions próprias, por exemplo ChavePixExistenteException. Como vamos retornar a mensagem dessa exception para o  Usuário? Uma alternativa é o Try{}Catch{}, mas teriamos que fazer o mesmo bloco em todas as classes Controller/Endpoint. Lembra que no Spring havia um controller do tipo Advice e nele criavamos métodos handler para tratar cada tipo de Excpetion, vamos ter que cria um aqui também!
Lá no Spring bastava criar o controller Advice que ele seria um filtro, ou seja, toda Requisição passava por ele e ele sabia tratar uma exception caso ocorresse, ou seja, na pilha de execução estourou uma Exception, ao voltar na pilha de execução (desimpilhando) iriamos cair no Advice novamente e ele trataria a excpetion!
Aqui, no Micronaut para criarmos um "Advice" devemos criar uma anotação e teremos que usá-la em cima de cada classe endpoint (no nosso caso RegistraChaveEndpoint). Ao anotar a classe estamos falando que antes de executar ele passará pelo Handler.

Criando o Advice (neste projeto ficou no pacote util.handle):

Primeiramente precisamos criar a anotação, podemos pensar que vamos colocá-la nas classes ou metodos que podem gerar Excepetion:
@Documented
@Retention(AnnotationRetention.RUNTIME)
@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)
@Around
annotation class ExceptionHandler()

Após criar a anotação agora temos que criar uma classe que irá tratar as exception que a anotação capturará, chamei essa classe de ExceptionHandlerIntercptor. Essa precisa ser anotada com @Singleton @InterceptorBean(NomeDaNossaAnotacao-NoCaso-ExceptionHandler::class) e implementar a interface MethodInterceptor<Any, Any>. Veja a implementação dessa classe (há comentarios no meio do codigo, pois é meio complexo):
@Singleton
//A anotação abaixo indica que vamos interceptar todos Beans com a anotação ExceptionHandler
// vamos intercptar para ver se tem erro ou se deixamos continuar a requisição
@InterceptorBean(ExceptionHandler::class)
class ExceptionHandlerIntercptor : MethodInterceptor<Any, Any> {

    override fun intercept(context: MethodInvocationContext<Any, Any>): Any? {

        try {

            //Siga o processamento que intercptamos
            return context.proceed()
        } catch (e: ConstraintViolationException) {

            val status = Status.INVALID_ARGUMENT
                .withCause(e)
                .withDescription(e.message)

            val statusRuntimeException = StatusRuntimeException(status)

            //Como conseguir o objeto responseObserver para responder ao cliente?
            // Pois ele nos foi dado ao implementar o servico do .proto

            //Resposta: Vamos conseguir através do contexto. Vai existir um contexto para
            // cada metodo ( ou metodo da classe) que recebeu a anotação @ExceptionHandler,
            // e como sabemos que o responseObserver é sempre o segundo parâmetro de um serviço de gRPC
            // podemos pegar o segundo parâmetro (indice 1) do contexto!

            /*
            Explicando na prática: Anotei a classe RegistraChaveEndpoint com @ExceptionHandler, pois nela há funções que pode
            gerar Exception e a anotação @ExceptionHandler é um "Advice ou Around".

            Por essa classe ter essa anotação ela sempre sera interceptada por este interceptador, no caso
            ExceptionHandlerIntercptor, pois fizemos ele interceptar todos Beans com  @ExceptionHandler.

            O interceptador sempre tem um contexo, que é a AÇÃO que a classe ou método vai fazer que pode gerar Exception,
            neste caso seria a função registraChave() que está dentro da classe RegistraChaveEndpoint.

            Se o contexto nesse caso é a função registraChave() e sabemos que essa função tem como parâmetro
            um responseObserver e que ele é sempre o segundo parâmetro, vamos pegá-lo atavés
            context.parameterValues[1]
             */

            val responseObserver = context.parameterValues[1] as StreamObserver<*>

            responseObserver.onError(statusRuntimeException)
        }catch (e: ChavePixExistenteException) {
    val status = Status.INVALID_ARGUMENT
        .withCause(e)
        .withDescription(e.message)

    val statusRuntimeException = StatusRuntimeException(status)
    val responseObserver = context.parameterValues[1] as StreamObserver<*>
}//Outros cath's para outras exceptions

        return null
    }
}


 











Agora podemos anotar a classe RegistraChaveEndpoint com @ExceptionHandler, ficando assim:

@Singleton
@ExceptionHandler
class RegistraChaveEndpoint(@Inject val chavePixService: ChavePixService) :
    KeyManagerGrpcServiceGrpc.KeyManagerGrpcServiceImplBase()


